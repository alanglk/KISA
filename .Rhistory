plot(x.mds3, main = "Distancia (1 - Jaccard)")
plot(x.mds3$points, main = "Distancia (1 - Jaccard)")
x.mds3$eig
# ########### data1.txt
# a) Obtener particiones en k = 2, 3, . . . , 10 clusters. Para cada partici´on en k clusters
# calcular la anchura media del silhouette ¯sk (silhouette()).
x <-read.table("./data/EAD/data1.txt", header = FALSE)
# ########### data1.txt
# a) Obtener particiones en k = 2, 3, . . . , 10 clusters. Para cada partici´on en k clusters
# calcular la anchura media del silhouette ¯sk (silhouette()).
x <-read.table("./data/EAD/data1.txt", header = FALSE)
View(x)
library(cluster)
kmeans(x, centers = 2, nstart = 1)
k2 <- kmeans(x, centers = 2, nstart = 1)
View(k2)
k2 <- kmeans(x, centers = c(2, 3, 4, 5, 6, 7, 8, 9, 10), nstart = 1)
k2 <- kmeans(x, centers = 3 , nstart = 1)
k3 <- kmeans(x, centers = 3 , nstart = 1)
View(x)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette(k2)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette(k2$cluster)
View(k3)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette(k2$cluster, dist = dist(x))
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
s2 <- silhouette(k2$cluster, dist = dist(x))
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
s2 <- silhouette(k2$cluster, dist = dist(x))
s2
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette_score <- function(k){
km <- kmeans(df, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(df))
mean(ss[, 3])
}
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
plot(k, type='b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette_score <- function(k){
km <- kmeans(df, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(df))
mean(ss[, 3])
}
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette_score <- function(x, k){
km <- kmeans(x, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(x))
mean(ss[, 3])
}
k <- 2:10
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette_score <- function(k){
km <- kmeans(x, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(x))
mean(ss[, 3])
}
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
plot(k, type='b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
plot(k, type='b', avg_sil, xlab='Numero de clusters', ylab='Meida Silhouette Score', frame=FALSE)
# ########### data1.txt
# a) Obtener particiones en k = 2, 3, . . . , 10 clusters. Para cada partici´on en k clusters
# calcular la anchura media del silhouette ¯sk (silhouette()).
x <-read.table("./data/EAD/data1.txt", header = FALSE)
library(cluster)
k2 <- kmeans(x, centers = 2, nstart = 1)
s2 <- silhouette(k2$cluster, dist = dist(x))
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette_score <- function(k){
km <- kmeans(x, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(x))
mean(ss[, 3])
}
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
plot(k, type='b', avg_sil, xlab='Numero de clusters', ylab='Meida Silhouette Score', frame=FALSE)
# c) Obtener una partici´on en k = 4 clusters con kmeans. Repetir el procedimiento
# kmeans y comparar las dos particiones que has obtenido. Repetirlo varias veces. ¿Coinciden?
p1 <- kmeans(x, centers = 4, nstart = 1)
p2 <- kmeans(x, centers = 4, nstart = 1)
table(p1, p2)
table(p1$cluster, p2$cluster)
table(p1$cluster, p2$cluster)
prop.table(table(p1$cluster, p2$cluster))
addmargins(table(p1$cluster, p2$cluster))
# c) Obtener una partici´on en k = 4 clusters con kmeans. Repetir el procedimiento
# kmeans y comparar las dos particiones que has obtenido. Repetirlo varias veces. ¿Coinciden?
p1 <- kmeans(x, centers = 4, nstart = 1)
p2 <- kmeans(x, centers = 4, nstart = 1)
addmargins(table(p1$cluster, p2$cluster))
# c) Obtener una partici´on en k = 4 clusters con kmeans. Repetir el procedimiento
# kmeans y comparar las dos particiones que has obtenido. Repetirlo varias veces. ¿Coinciden?
p1 <- kmeans(x, centers = 4, nstart = 1)
p2 <- kmeans(x, centers = 4, nstart = 1)
addmargins(table(p1$cluster, p2$cluster))
# ########### data2.txt
# a) Obtener particiones en k = 2, 3, . . . , 10 clusters. Para cada partici´on en k clusters
# calcular la anchura media del silhouette ¯sk (silhouette()).
x <-read.table("./data/EAD/data2.txt", header = FALSE)
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
plot(k, type='b', avg_sil, xlab='Numero de clusters', ylab='Meida Silhouette Score', frame=FALSE)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
plot(k, type='b', avg_sil, xlab='Numero de clusters data2', ylab='Meida Silhouette Score', frame=FALSE)
# c) Obtener una partici´on en k clusters con kmeans (Elije t´u mismo el valor para k).
# Repetir el procedimiento kmeans y comparar las dos particiones que has obtenido.
# Repetir varias veces. ¿Coinciden?
p1 <- kmeans(x, centers = 4, nstart = 1)
p2 <- kmeans(x, centers = 4, nstart = 1)
addmargins(table(p1$cluster, p2$cluster))
plot(silhouette(x, dist(x)))
silhouette(x, dist(x)
)
plot(silhouette(kmeans(x, centers = 2, nstart = 1), dist(x)))
plot(silhouette(kmeans(x, centers = 2, nstart = 1)$clusters, dist(x)))
kmeans(x, centers = 2, nstart = 1)$clusters
plot(silhouette(kmeans(x, centers = 2, nstart = 1)$cluster, dist(x)))
plot(silhouette(kmeans(x, centers = 4, nstart = 1)$cluster, dist(x)))
plot(silhouette(kmeans(x, centers = 10, nstart = 1)$cluster, dist(x)))
str(x)
str(p1)
plot(silhouette(kmeans(x, centers = 10, nstart = 10)$cluster, dist(x)))
plot(silhouette(kmeans(x, centers = 2, nstart = 10)$cluster, dist(x)))
k <- 2:20
avg_sil <- sapply(k, silhouette_score)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
plot(k, type='b', avg_sil, xlab='Numero de clusters data2', ylab='Meida Silhouette Score', frame=FALSE)
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
plot(k, type='b', avg_sil, xlab='Numero de clusters data2', ylab='Meida Silhouette Score', frame=FALSE)
plot(silhouette(kmeans(x, centers = 2, nstart = 10)$cluster, dist(x)))
# c) Obtener una partici´on en k clusters con kmeans (Elije t´u mismo el valor para k).
# Repetir el procedimiento kmeans y comparar las dos particiones que has obtenido.
# Repetir varias veces. ¿Coinciden?
p1 <- kmeans(x, centers = 4, nstart = 1)
p2 <- kmeans(x, centers = 4, nstart = 1)
addmargins(table(p1$cluster, p2$cluster))
str(p1)
# ########### data1.txt
# a) Obtener particiones en k = 2, 3, . . . , 10 clusters. Para cada partici´on en k clusters
# calcular la anchura media del silhouette ¯sk (silhouette()).
x <-read.table("./data/EAD/data1.txt", header = FALSE)
library(cluster)
k2 <- kmeans(x, centers = 2, nstart = 1)
s2 <- silhouette(k2$cluster, dist = dist(x))
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette_score <- function(k){
km <- kmeans(x, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(x))
mean(ss[, 3])
}
# ########### data2.txt
# a) Obtener particiones en k = 2, 3, . . . , 10 clusters. Para cada partici´on en k clusters
# calcular la anchura media del silhouette ¯sk (silhouette()).
x <-read.table("./data/EAD/data2.txt", header = FALSE)
k <- 2:10
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette_score <- function(k){
km <- kmeans(x, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(x))
mean(ss[, 3])
}
avg_sil <- sapply(k, silhouette_score)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
plot(k, type='b', avg_sil, xlab='Numero de clusters data2', ylab='Meida Silhouette Score', frame=FALSE)
# ########### data2.txt
# a) Obtener particiones en k = 2, 3, . . . , 10 clusters. Para cada partici´on en k clusters
# calcular la anchura media del silhouette ¯sk (silhouette()).
x <-read.table("./data/EAD/data2.txt", header = FALSE)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette_score <- function(k){
km <- kmeans(x, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(x))
mean(ss[, 3])
}
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
plot(k, type='b', avg_sil, xlab='Numero de clusters data1', ylab='Meida Silhouette Score', frame=FALSE)
# ########### data2.txt
# a) Obtener particiones en k = 2, 3, . . . , 10 clusters. Para cada partici´on en k clusters
# calcular la anchura media del silhouette ¯sk (silhouette()).
x <-read.table("./data/EAD/data2.txt", header = FALSE)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
silhouette_score <- function(k){
km <- kmeans(x, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(x))
mean(ss[, 3])
}
avg_sil <- sapply(k, silhouette_score)
# b) Representar gr´aficamente la anchura media del silhouette ¯sk frente al n´umero de
# clusters k de la partici´on. ¿Cu´antos clusters dir´ıas que hay en la partici´on seg´un
# este gr´afico?
plot(k, type='b', avg_sil, xlab='Numero de clusters data2', ylab='Meida Silhouette Score', frame=FALSE)
View(silhouette_score)
########################### Ejercicio 6 #################################
# El conjunto de datos nutrient.dat recoge los nutrientes de 27 tipos de carne, pescado
# o ave. Las columnas recogen: nombre del alimento, energ´ıa (KCalorias), prote´ınas
# (gramos), grasa (gramos), calcio (miligramos), hierro (miligrams) por 85 gramos de
# alimento.
library(cluster)
########################### Ejercicio 6 #################################
# El conjunto de datos nutrient.dat recoge los nutrientes de 27 tipos de carne, pescado
# o ave. Las columnas recogen: nombre del alimento, energ´ıa (KCalorias), prote´ınas
# (gramos), grasa (gramos), calcio (miligramos), hierro (miligrams) por 85 gramos de
# alimento.
datos <- read.table("./data/EAD/nutrient.dat", header = FALSE)
########################### Ejercicio 6 #################################
# El conjunto de datos nutrient.dat recoge los nutrientes de 27 tipos de carne, pescado
# o ave. Las columnas recogen: nombre del alimento, energ´ıa (KCalorias), prote´ınas
# (gramos), grasa (gramos), calcio (miligramos), hierro (miligrams) por 85 gramos de
# alimento.
datos <- read.table("./data/EAD/nutrient.dat", sep = "\t" header = FALSE)
########################### Ejercicio 6 #################################
# El conjunto de datos nutrient.dat recoge los nutrientes de 27 tipos de carne, pescado
# o ave. Las columnas recogen: nombre del alimento, energ´ıa (KCalorias), prote´ınas
# (gramos), grasa (gramos), calcio (miligramos), hierro (miligrams) por 85 gramos de
# alimento.
datos <- read.table("./data/EAD/nutrient.dat", sep = "\t", header = FALSE)
########################### Ejercicio 6 #################################
# El conjunto de datos nutrient.dat recoge los nutrientes de 27 tipos de carne, pescado
# o ave. Las columnas recogen: nombre del alimento, energ´ıa (KCalorias), prote´ınas
# (gramos), grasa (gramos), calcio (miligramos), hierro (miligrams) por 85 gramos de
# alimento.
datos <- read.table("./data/EAD/nutrient.dat", sep = "\t", header = FALSE)
library(cluster)
hclust(datos, method = "ward.D2")
View(datos)
View(datos)
########################### Ejercicio 6 #################################
# El conjunto de datos nutrient.dat recoge los nutrientes de 27 tipos de carne, pescado
# o ave. Las columnas recogen: nombre del alimento, energ´ıa (KCalorias), prote´ınas
# (gramos), grasa (gramos), calcio (miligramos), hierro (miligrams) por 85 gramos de
# alimento.
datos <- read.table("./data/EAD/nutrient.dat", row.names = 1, sep = "\t", header = FALSE)
View(datos)
View(datos)
colnames(datos) <- c("Calorias", "Proteinas", "Grasa", "Calcio", "Hierro")
hclust(datos, method = "ward.D2")
head(datos)
hclust(dist(datos), method = "ward.D2")
jerarquico <- hclust(dist(datos), method = "ward.D2")
plot(jerarquico)
datos <- scale(datos, center = TRUE, scale = TRUE)
head(datos)
library(cluster)
jerarquico <- hclust(dist(datos), method = "ward.D2")
plot(jerarquico)
pairs(datos)
# b) Aplica el PAM para diferentes n´umeros de clusters k = 2, . . . , 10, y mira que
# n´umero de clusters te sugieren las anchuras medias de los silhouettes.
silhouette_score <- function(d, k){
pm <- pam(d, k)
ss(clusters$clust, d)
mean(ss[, 3])
}
sapply(k, silhouette_score(d))
dists <- dist(x)
k <- 2:10
sapply(k, silhouette_score(dists))
dists <- dist(x)
k <- 2:10
sapply(k, silhouette_score(dists))
sapply(k, silhouette_score)
k <- 2:10
sapply(k, silhouette_score)
avg_sil <- sapply(k, silhouette_score)
part.ward <- hclust(dist(datos), method = "ward.D2")
plot(part.ward)
part.pam <- pam(dist(x), k = 2)
# b) Aplica el PAM para diferentes n´umeros de clusters k = 2, . . . , 10, y mira que
# n´umero de clusters te sugieren las anchuras medias de los silhouettes.
silhouette_score <- function(k){
d <- dist(datos)
pm <- pam(d, k)
ss(clusters$clust, d)
mean(ss[, 3])
}
dists <- dist(x)
dists <- dist(datos)
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
ss <- silhouette(clusters$clust, d)
# b) Aplica el PAM para diferentes n´umeros de clusters k = 2, . . . , 10, y mira que
# n´umero de clusters te sugieren las anchuras medias de los silhouettes.
silhouette_score <- function(k){
d <- dist(datos)
pm <- pam(d, k)
ss <- silhouette(pm$cluster, d)
mean(ss[, 3])
}
dists <- dist(datos)
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
plot(avg_sil, type = "b")
# b) Aplica el PAM para diferentes n´umeros de clusters k = 2, . . . , 10, y mira que
# n´umero de clusters te sugieren las anchuras medias de los silhouettes.
silhouette_pam<- function(k){
d <- dist(datos)
pm <- pam(d, k)
ss <- silhouette(pm$cluster, d)
mean(ss[, 3])
}
dists <- dist(datos)
k <- 2:10
avg_sil <- sapply(k, silhouette_pam)
plot(avg_sil, type = "b")
avg_sil <-
plot(sapply(k, silhouette_pam), type = "b")
plot(part.ward)
part.pam <- pam(dists, k = 2)
plot(sapply(k, silhouette_pam), type = "b")
part.pam <- pam(dists, k = 3)
# c) Para el n´umeros de clusters que hayas decidido, calcula las particiones que te da
# el m´etodo de Ward y el PAM. ¿Coinciden?
addmargins(table(part.ward, part.pam))
part.pam <- pam(dists, k = 3)$clustering
# c) Para el n´umeros de clusters que hayas decidido, calcula las particiones que te da
# el m´etodo de Ward y el PAM. ¿Coinciden?
addmargins(table(part.ward, part.pam))
# b) Aplica el PAM para diferentes n´umeros de clusters k = 2, . . . , 10, y mira que
# n´umero de clusters te sugieren las anchuras medias de los silhouettes.
silhouette_pam<- function(k){
d <- dist(datos)
pm <- pam(d, k)$clustering
ss <- silhouette(pm, d)
mean(ss[, 3])
}
dists <- dist(datos)
k <- 2:10
plot(sapply(k, silhouette_pam), type = "b")
# b) Aplica el PAM para diferentes n´umeros de clusters k = 2, . . . , 10, y mira que
# n´umero de clusters te sugieren las anchuras medias de los silhouettes.
silhouette_pam<- function(k){
d <- dist(datos)
pm <- pam(d, k)$clustering
ss <- silhouette(pm, d)
mean(ss[, 3])
}
k <- 2:10
plot(sapply(k, silhouette_pam), type = "b")
########################### Ejercicio 6 #################################
# El conjunto de datos nutrient.dat recoge los nutrientes de 27 tipos de carne, pescado
# o ave. Las columnas recogen: nombre del alimento, energ´ıa (KCalorias), prote´ınas
# (gramos), grasa (gramos), calcio (miligramos), hierro (miligrams) por 85 gramos de
# alimento.
datos <- read.table("./data/EAD/nutrient.dat", row.names = 1, sep = "\t", header = FALSE)
# b) Aplica el PAM para diferentes n´umeros de clusters k = 2, . . . , 10, y mira que
# n´umero de clusters te sugieren las anchuras medias de los silhouettes.
silhouette_pam<- function(k){
d <- dist(datos)
pm <- pam(d, k)$clustering
ss <- silhouette(pm, d)
mean(ss[, 3])
}
k <- 2:10
plot(sapply(k, silhouette_pam), type = "b")
part.pam <- pam(dist(datos), k = 3)$clustering
########################### Ejercicio 6 #################################
# El conjunto de datos nutrient.dat recoge los nutrientes de 27 tipos de carne, pescado
# o ave. Las columnas recogen: nombre del alimento, energ´ıa (KCalorias), prote´ınas
# (gramos), grasa (gramos), calcio (miligramos), hierro (miligrams) por 85 gramos de
# alimento.
datos <- read.table("./data/EAD/nutrient.dat", row.names = 1, sep = "\t", header = FALSE)
colnames(datos) <- c("Calorias", "Proteinas", "Grasa", "Calcio", "Hierro")
head(datos)
# a) Aplica el m´etodo de Ward utilizando la distancia eucl´ıdea entre pares de objetos.
# ¿Crees que convendr´ıa estandarizar previamente las variables? ¿Se vislumbra
# alguna estructura entre los objetos?
datos <- scale(datos, center = TRUE, scale = TRUE)
head(datos)
pairs(datos)
library(cluster)
part.ward <- hclust(dist(datos), method = "ward.D2")
plot(part.ward)
# b) Aplica el PAM para diferentes n´umeros de clusters k = 2, . . . , 10, y mira que
# n´umero de clusters te sugieren las anchuras medias de los silhouettes.
silhouette_pam<- function(k){
d <- dist(datos)
pm <- pam(d, k)$clustering
ss <- silhouette(pm, d)
mean(ss[, 3])
}
k <- 2:10
plot(sapply(k, silhouette_pam), type = "b")
part.pam <- pam(dist(datos), k = 3)$clustering
# c) Para el n´umeros de clusters que hayas decidido, calcula las particiones que te da
# el m´etodo de Ward y el PAM. ¿Coinciden?
addmargins(table(part.ward, part.pam))
plot(sapply(k, silhouette_pam), type = "b", ylim = c(0,1))
part.ward <- cutree(part.ward, 3)
# c) Para el n´umeros de clusters que hayas decidido, calcula las particiones que te da
# el m´etodo de Ward y el PAM. ¿Coinciden?
addmargins(table(part.ward, part.pam))
part.pam <- pam(dist(datos), k = 3)$clustering
# c) Para el n´umeros de clusters que hayas decidido, calcula las particiones que te da
# el m´etodo de Ward y el PAM. ¿Coinciden?
addmargins(table(part.ward, part.pam))
rbind(part.ward[part.pam==1], row.names(datos)[part.pam==1])
# d) Describe los clusters que has obtenido.
for (cluster in 1:3){
sekect <- part.pam==cluster
aux <- apply(datos[select], 2, function(x){c(mean(x), sd(x))})
cat("\nCluster ", cluster, "\n")
print(aux)
}
select <- part.pam==cluster
# d) Describe los clusters que has obtenido.
for (cluster in 1:3){
select <- part.pam==cluster
aux <- apply(datos[select], 2, function(x){c(mean(x), sd(x))})
cat("\nCluster ", cluster, "\n")
print(aux)
}
# d) Describe los clusters que has obtenido.
for (cluster in 1:3){
select <- part.pam==cluster
aux <- apply(datos[select], 2, function(x){c(mean(x), sd(x))})
cat("\nCluster ", cluster, "\n")
print(aux)
}
aux <- apply(datos[select], 2, function(x){print(x) c(mean(x), sd(x))})
aux <- apply(datos[select], 2, function(x){c(mean(x), sd(x))})
select <- part.pam==cluster
aux <- apply(datos[select], 2, function(x){c(mean(x), sd(x))})
select <- part.pam==cluster
select
datos[select]
aux <- apply(datos[select], 2, function(x){c(mean(x), sd(x))})
aux <- lapply(datos[select], 2, function(x){c(mean(x), sd(x))})
aux <- lapply(datos[select], function(x){c(mean(x), sd(x))})
# d) Describe los clusters que has obtenido.
for (cluster in 1:3){
select <- part.pam==cluster
aux <- lapply(datos[select], function(x){c(mean(x), sd(x))})
cat("\nCluster ", cluster, "\n")
print(aux)
}
# d) Describe los clusters que has obtenido.
for (cluster in 1:3){
select <- part.pam==cluster
aux <- sapply(datos[select], function(x){c(mean(x), sd(x))})
cat("\nCluster ", cluster, "\n")
print(aux)
}
# d) Describe los clusters que has obtenido.
for (cluster in 1:3){
select <- part.pam==cluster
aux <- apply(datos[select], 2, function(x){c(mean(x), sd(x))})
cat("\nCluster ", cluster, "\n")
print(aux)
}
# d) Describe los clusters que has obtenido.
for (cluster in 1:3){
select <- part.pam==cluster
aux <- apply(datos[select], 2, function(x){c(mean(x), sd(x))})
cat("\nCluster ", cluster, "\n")
print(aux)
}
aux <- apply(datos[select, ], 2, function(x){c(mean(x), sd(x))})
# d) Describe los clusters que has obtenido.
for (cluster in 1:3){
select <- part.pam==cluster
aux <- apply(datos[select, ], 2, function(x){c(mean(x), sd(x))})
cat("\nCluster ", cluster, "\n")
print(aux)
}
