# Cambiar orientación de las etiquetas
barplot(table(Regional.indicator), col = "wheat",
main = "Número de países en las regiones", las=2)
# Cambiar orientación de las etiquetas las = (0, 1, 2, 3)
barplot(table(Regional.indicator), col = "wheat",
main = "Número de países en las regiones", las=4)
# ¿El valor de la escalera está relacionado con el apoyo social?
# Dibujamos el gráfico base: la variable Escalera (Ladder.score)
plot(Social.support, Ladder.score, xlab="Apoyo social", ylab="Escalera")
# Añadimos la línes escalera = 4
abline(h=4)
# Añadimos un punto, grande, en el centroide
points(mean(Social.support), mean(Ladder.score), pch=21, bg="black", col="red", cex=2)
# Añadimos un punto, grande, en el centroide
points(mean(Social.support), mean(Ladder.score), pch=21, bg="red", col="black", cex=2)
# Añadimos texto dentro del gráfico
text(mean(Social.support)-0.05, mean(Ladder.score), labels="Centroide", col="red")
# Añadimos título
mtext("Percepción felicidad", 3, line=1)
# Utilizando el color para indicar países europeos
europe <- (Regional.indicator == "Central and Eastern Europe") | (Regional.indicator == "Western Europe")
plot(Social.support, Ladder.score, xlab="Apoyo social", ylab="Escalera", col=europe+1)
# En 2 gráficos diferentes
par(mfrow=c(1,2))
plot(Social.support[europe], Ladder.score[europe], xlab="Apoyo social", ylab="Escalera",
col=2, main="Europa")
plot(Social.support[!europe], Ladder.score[!europe], xlab="Apoyo social", ylab="Escalera",
col=1, main="No Europa")
# Desvincular la tabla de datos
detach(datos)
# Par y Colores
?par
# Colores por números
kol <- rep(1:3, each=3)
x <- rnorm(10)
y <- rnorm(10)
plot(x, y, type="n")
text(x, y, kol, col=kol)
colors()
kol <- rep(kol, each=3)
plot(x, y, col=kol )
# Sin transparecia
x <- rnorm(1000)
y <- rnorm(1000)
plot(x, y, pch=19)
# Con transparencia
plot(x, y, pch=19, col=rgb(0,0,0, 0.2))
datos <- read.table("./data/EAD/WHR2021C2.csv", header = TRUE, sep = ";")
library(ggplot2)
# Escalera en función del apoyo social
g <- ggplot(dat, aes(Social.support, Ladder.score))
# Escalera en función del apoyo social
g <- ggplot(datos, aes(Social.support, Ladder.score))
print(g)
# Todavía no hemos añadido las capas
g + geom_point()
# Añadimos una capa de regresion
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method="lm")
# Gráficos condicionados : FACETS
europe <- (dat$Regional.indicator == "Central and Eastern Europe") |
(dat$Regional.indicator == "Western Europe")
# Gráficos condicionados : FACETS
europe <- (Regional.indicator == "Central and Eastern Europe") |
(Regional.indicator == "Western Europe")
df <- data.frame(Country.names=Country.name, Ladder.score=Ladder.score,
Social.support=Social.support, Europe=europe)
g <- ggplot(df, aes(Social.support, Ladder.score))
g + geom_point() + facet_grid(. ~ Europe) + geom_smooth(method="lm")
View(df)
g + geom_point() + facet_grid(Europe ~ .) + geom_smooth(method="lm")
g + geom_point() + facet_grid(rows = Europe) + geom_smooth(method="lm")
g + geom_point() + facet_grid(cols = Europe) + geom_smooth(method="lm")
g + geom_point() + facet_grid(cols = . ~ Europe) + geom_smooth(method="lm")
g + geom_point() + facet_grid(. ~ Europe) + geom_smooth(method="lm")
. ~ Europe
# Modificando los "Aesthetics"
g + geom_point(color="steelblue", size=4, alpha=1/2)
g + geom_point(aes(color=Europe), size=4, alpha=1/2)
# Modificando etiquetas
g + geom_point(aes(color=Europe), size=4, alpha=1/2) +
labs(title="Informe: felicidad")+
labs(x="Apoyo social", y="Valor Escalera")
#########################################################################
#                            EJERCICIO 1                                #
#########################################################################
# EJERCICIO 1
datos <- read.table("./data/EAD/TiemposActividades.csv", header = TRUE, sep = ";")
attach(datos) # Para acceder directamente a los datos del dataframe
View(datos)
#########################################################################
#                            EJERCICIO 1                                #
#########################################################################
# EJERCICIO 1
datos <- read.table("./data/EAD/TiemposActividades.csv", header = TRUE, sep = "  ")
attach(datos) # Para acceder directamente a los datos del dataframe
View(datos)
View(datos)
#########################################################################
#                            EJERCICIO 1                                #
#########################################################################
# EJERCICIO 1
datos <- read.table("./data/EAD/TiemposActividades.csv", header = TRUE, sep = "")
attach(datos) # Para acceder directamente a los datos del dataframe
View(datos)
View(datos)
View(datos)
View(datos)
hist(TiempoLAB)
colors()
hist(TiempoLAB, breaks = 20, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias")
hist(TiempoLAB, breaks = 20, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000))
hist(TiempoLAB, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000))
hist(TiempoLAB, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000))
hist(TiempoLAB, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000), xlim = c(0, 20))
hist(TiempoLAB, breaks = 50, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000))
hist(TiempoLAB, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000))
hist(TiempoLAB, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000))
hist(TiempoLABh, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000))
# Los datos de TiempoLAB están en segundos. Hay que pasarlos a horas
TiempoLABh <- TiempoLAB / 3600
hist(TiempoLABh, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000))
abline(v = mean(TiempoLABh))
text(mean(TiempoLABh), 1000, labels = "Puntuación media " + mean(TiempoLABh))
text(mean(TiempoLABh), 1000, labels = cat("Puntuación media ", mean(TiempoLABh))
mean(TiempoLABh)
mean(TiempoLABh.score)
TiempoLABh
mean(TiempoLAB)
mean(TiempoLABh)
cat("media: ", mean(TiempoLABh))
text(mean(TiempoLABh), 1000, labels = cat("Puntuación media ", mean(TiempoLABh))
text(mean(TiempoLABh), 1000, labels = cat("Puntuación media ", mean(TiempoLABh)))
text(mean(TiempoLABh), 1000, labels = cat("Puntuación media ", mean(TiempoLABh)))
hist(TiempoLABh, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000), main = NULL)
abline(v = mean(TiempoLABh))
text(mean(TiempoLABh), 1000, labels = cat("Puntuación media ", mean(TiempoLABh)))
abline(v = mean(TiempoLABh), lty = 2)
hist(TiempoLABh, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000), main = NULL)
abline(v = mean(TiempoLABh), lty = 2)
text(mean(TiempoLABh), 1000, labels = cat("Puntuación media ", mean(TiempoLABh)))
meanValue <- mean(TiempoLABh)
hist(TiempoLABh, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000), main = NULL)
abline(v = meanValue, lty = 2) # Agregar linea punteada en la media
text(meanValue, 1000, labels = cat("Puntuación media ", round(meanValue)))
text(meanValue, 1000, labels = paste("Puntuación media", round(meanValue), collapse = " "))
text(meanValue + 0.3 , 1000, labels = paste("Puntuación media", round(meanValue), collapse = " "))
hist(TiempoLABh, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000), main = NULL)
abline(v = meanValue, lty = 2) # Agregar linea punteada en la media
text(meanValue + 2 , 1000, labels = paste("Puntuación media", round(meanValue), collapse = " "))
text(meanValue + 2.2 , 1000, labels = paste("Puntuación media", round(meanValue), collapse = " "))
hist(TiempoLABh, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000), main = NULL)
abline(v = meanValue, lty = 2) # Agregar linea punteada en la media
text(meanValue + 2.2 , 1000, labels = paste("Puntuación media", round(meanValue), collapse = " "))
text(meanValue + 2.2 , 1000, labels = paste("Puntuación media", round(meanValue, digits = 3), collapse = " "))
hist(TiempoLABh, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000), main = NULL)
abline(v = meanValue, lty = 2) # Agregar linea punteada en la media
text(meanValue + 2.2 , 1000, labels = paste("Puntuación media", round(meanValue, digits = 3), collapse = " "))
hist(TiempoLABh, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000), main = NULL)
abline(v = meanValue, lty = 2) # Agregar linea punteada en la media
text(meanValue + 2.5 , 1000, labels = paste("Puntuación media", round(meanValue, digits = 3), collapse = " "))
# GRAFICO 2
# En 2 gráficos diferentes
par(mfrow=c(1,2))
jornadaNormal <- (JORNADA == "Normal")
jornadaNormal
jornadaNormal <- (JORNADA == "DescansoNOTRAB") | (JORNADA == "DescansoSITRAB")
jornadaNormal
TiempoLABh <- TiempoLAB / 3600
TiempoCUIDADOh <- TiempoCUIDADO / 3600
# Identificamos las entradas de jornadas normales y de descanso
jornadaNormal   <- (JORNADA == "Normal")
jornadaDescanso <- (JORNADA == "DescansoNOTRAB") | (JORNADA == "DescansoSITRAB")
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=2, main="Jornada NORMAL")
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=2, main="Jornada NORMAL", ylim = 12)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=2, main="Jornada NORMAL")
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=1, main="Jornada NORMAL")
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=3, main="Jornada NORMAL")
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=2, main="Jornada NORMAL")
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=3, main="Jornada NORMAL")
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=4, main="Jornada NORMAL")
for (x in SEXO){
if(x == "F"){
append(colores, "red")
}else{
append(colores, "blue")
}
}
colores <- list()
for (x in SEXO){
if(x == "F"){
append(colores, "red")
}else{
append(colores, "blue")
}
}
colores
colores <- list()
for (x in SEXO){
if(x == "F"){
colores[length(colores) +1] <- "red"
}else{
colores[length(colores) +1] <- "blue"
}
}
list
colores
colores <- list()
for (x in SEXO){
if(x == "F"){
colores[[length(colores) +1]] <- "red"
}else{
colores[[length(colores) +1]] <- "blue"
}
}
colores
TiempoLABh
colores[length(colores) +1] <- "blue"
colores
colores[[length(colores) + 1]] <- "red"
colores
colores <- ifelse(SEXO == "M", "red", "blue")
colores
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=colores, main="Jornada NORMAL")
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=colores, main="Jornada NORMAL", pch = 0)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col=colores, main="Jornada NORMAL", pch = 15)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 15)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 0)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg="red", main="Jornada NORMAL", pch = 0)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="blue", bg="red", main="Jornada NORMAL", pch = 0)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="blue", bg="red", main="Jornada NORMAL", pch = 24)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="blue", bg="red", main="Jornada NORMAL", pch = 15)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="blue", bg="red", main="Jornada NORMAL", pch = 22)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colors, main="Jornada NORMAL", pch = 22)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22)
summary(TiempoCUIDADOh)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22, lwd = 12)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22, lwd = 10)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22, lwd = 1)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22 ylim = c(0, 12))
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22, ylim = c(0, 12))
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22, ylim = c(0, 18))
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22, ylim = c(0, 20))
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = 22, ylim = c(0, 12))
#########################################################################
#                            EJERCICIO 1                                #
#########################################################################
datos <- read.table("./data/EAD/TiemposActividades.csv", header = TRUE, sep = "\t")
attach(datos) # Para acceder directamente a los datos del dataframe
# GRAFICO 1
# Los datos de TiempoLAB están en segundos. Hay que pasarlos a horas
TiempoLABh <- TiempoLAB / 3600
meanValue <- mean(TiempoLABh)
hist(TiempoLABh, breaks = 40, col = "purple", xlab = "Dedicación Trabajo Profesional(h.)", ylab = "Frecuencias", ylim = c(0, 4000), main = NULL)
abline(v = meanValue, lty = 2) # Agregar linea punteada en la media
text(meanValue + 2.5 , 1000, labels = paste("Puntuación media", round(meanValue, digits = 3), collapse = " "))
# GRAFICO 2
# Tiempo Profesion (h) en X y Tiempo Cuidados (h) en Y por Jornadas NORMALES y Jornadas DESCANSO
par(mfrow=c(1,2))
TiempoLABh <- TiempoLAB / 3600
TiempoCUIDADOh <- TiempoCUIDADO / 3600
# Identificamos las entradas de jornadas normales y de descanso
jornadaNormal   <- (JORNADA == "Normal")
jornadaDescanso <- (JORNADA == "DescansoNOTRAB") | (JORNADA == "DescansoSITRAB")
colores <- ifelse(SEXO == "M", "red", "blue")
formas <- ifelse(SEXO == "M", 25, 22)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = formas, ylim = c(0, 12))
formas <- ifelse(SEXO == "M", 25, 21)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = formas, ylim = c(0, 12))
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = formas, ylim = c(0, 12))
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = formas, ylim = c(0, 12))
formas <- ifelse(SEXO == "M", 21, 22)
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = formas, ylim = c(0, 12))
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = formas, ylim = c(0, 12))
plot(TiempoLABh[jornadaDescanso], TiempoCUIDADOh[jornadaDescanso], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada DESCANSO", pch = formas, ylim = c(0, 12))
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = formas, ylim = c(0, 12))
plot(TiempoLABh[jornadaDescanso], TiempoCUIDADOh[jornadaDescanso], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada DESCANSO", pch = formas, ylim = c(0, 12))
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = formas, ylim = c(0, 12))
plot(TiempoLABh[jornadaNormal], TiempoCUIDADOh[jornadaNormal], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada NORMAL", pch = formas, ylim = c(0, 12))
plot(TiempoLABh[jornadaDescanso], TiempoCUIDADOh[jornadaDescanso], xlab="Tiempo Profesión (h.)", ylab="Tiempo Cuidados (h.)",
col="black", bg=colores, main="Jornada DESCANSO", pch = formas, ylim = c(0, 12))
legend(1, 95, legend=c("Mujeres", "Hombres"),
col=c("red", "blue"), lty=1:2, cex=0.8)
#########################################################################
#                         REPASO ÁLGEBRA LINEAL                   #
#########################################################################
Hn <- function(n)
{
# Matriz de centrado (dim. n)
unos <- matrix(rep(1, n), ncol=1)
H <- diag(1, n) - unos%*%t(unos)/n
return(H)
}
#########################################################################
#                         REPASO ÁLGEBRA LINEAL                   #
#########################################################################
Hn <- function(n)
{
# Matriz de centrado (dim. n)
unos <- matrix(rep(1, n), ncol=1)
H <- diag(1, n) - unos%*%t(unos)/n
return(H)
}
#########################################################################
#                         REPASO ÁLGEBRA LINEAL                   #
#########################################################################
Hn <- function(n)
{
# Matriz de centrado (dim. n)
unos <- matrix(rep(1, n), ncol=1)
H <- diag(1, n) - unos%*%t(unos)/n
return(H)
}
HN
CLEAR
n <- 20
p <- 3
set.seed(36209)
X <- matrix(round(runif(n*p, min=10, max=20), digits=1), ncol=p, byrow=TRUE)
X
# Por fila
cf <- X%*%Hn(p)
apply(cf, 1, mean)
View(X)
View(cf)
# Por columna
cc <- Hn(n)%*%X
View(cc)
View(cc)
# Centrar por fila (centrar los datos es restar la media)
cf <- X%*%Hn(p)
apply(cf, 1, mean) # Comprobamos que la media de las columnas es 0
View(cf)
# Centrar por columna
cc <- Hn(n)%*%X
apply(cc, 2, mean) # Comprobamos que la media de las filas es 0
# Centramos por filas y luego por columnas
dc <- Hn(n)%*%X%*%Hn(p)
apply(dc, 1, mean)
apply(dc, 2, mean)
# Dada la matriz A y sus correspondientes vectores de medias por fila (mF ), columna (mC ) y total (mT ),
# comprueba que HAH = HA − mF + mT (en cada caso con las correctas dimensiones).
dc
Hn(n)%*%X - cf + cc
Hn(n)%*%X - cc + cf
# Dada la matriz A y sus correspondientes vectores de medias por fila (mF ), columna (mC ) y total (mT ),
# comprueba que HAH = HA − mF + mT (en cada caso con las correctas dimensiones).
dc
Hn(n)%*%X - cc + cf
Hn(n)%*%X - apply(X, 1, mean) + apply(X, 2, mean)
# Dada la matriz A y sus correspondientes vectores de medias por fila (mF ), columna (mC ) y total (mT ),
# comprueba que HAH = HA − mF + mT (en cada caso con las correctas dimensiones).
dc
Hn(n)%*%X - apply(X, 1, mean) + apply(X, 2, mean)
# Dada la matriz A y sus correspondientes vectores de medias por fila (mF ), columna (mC ) y total (mT ),
# comprueba que HAH = HA − mF + mT (en cada caso con las correctas dimensiones).
A <- matrix(c(1, 2, 3, 4, 3, 1), nrow = 2, ncol = 3)
A
# Dada la matriz A y sus correspondientes vectores de medias por fila (mF ), columna (mC ) y total (mT ),
# comprueba que HAH = HA − mF + mT (en cada caso con las correctas dimensiones).
A <- matrix(c(1, 4, 2, 3, 3, 1), nrow = 2, ncol = 3)
A
hah <- Hn(2)%*%A%*%Hn(3)
hah
apply(A, 1, mean)
apply(A, 2, mean)
apply(hah, 2, mean)
apply(hah, 1, mean)
apply(hah, 2, mean)
ha <-  Hn(2)%*%A
mF <- apply(A, 1, mean)
mf
mF <- apply(A, 1, mean)
mf
apply(A, 1, mean)
bla <- apply(A, 1, mean)
bla
mF <- apply(A, 1, mean)
mF
mC <- apply(A, 2, mean)
hah
ha - mF + mT
ha - mF + mC
mF
mC
mF <- t(apply(A, 1, mean))
mF
mC
ha - mF + mC
mF <- matrix(apply(A, 1, mean), row = 1)
mF <- matrix(apply(A, 1, mean), nrow = 1)
mC <- matrix(apply(A, 2, mean), ncol = 1)
ha - mF + mC
ha
mF
mC
mF <- matrix(apply(A, 1, mean), ncol = 1)
mC <- matrix(apply(A, 2, mean), nrow = 1)
ha
mF
mC
ha -mF
mF <- matrix(apply(A, 1, mean), ncol = 1, nrow = 2, byrow = FALSE)
mF
mF <- matrix(apply(A, 1, mean), ,nrow = 2, ncol = 3, byrow = TRUE)
mF
mF <- matrix(apply(A, 1, mean), ,nrow = 2, ncol = 3, byrow = FALSE)
mF
mF <- matrix(apply(A, 1, mean), nrow = 2, ncol = 3, byrow = FALSE)
mC <- matrix(apply(A, 2, mean), nrow = 2, ncol = 3, byrow = TRUE)
mC
mC <- matrix(apply(A, 2, mean), nrow = 2, ncol = 3, byrow = FALSE)
mC
mC <- matrix(apply(A, 2, mean), nrow = 2, ncol = 3, byrow = TRUE)
ha - mF + mC
hah
apply(A, 1, mean)
mF
apply(A, 2, mean)
mC
ha - mF + mC
mean(A)
mT <- mean(A)
ha - mF + mT
hah == ha - mF + mT
ha - mF + mT
hah
hah == ha - mF + mT
identical(hah, ha - mF + mT)
matequal(hah, ha - mF + mT)
# Comprobar si dos matrices son iguales
matequal <- function(x, y)
is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
matequal(hah, ha - mF + mT)
# Comprobar si dos matrices son iguales
matequal <- function(x, y){
return is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
# Comprobar si dos matrices son iguales
matequal <- function(x, y){
return (is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y))
}
matequal(hah, ha - mF + mT)
#########################################################################
#                 Distancias, similaridades y kernels                   #
#########################################################################
getwd() #setwd()
dat <- matrix(c(1.1, 2.0
1.9, 0.8
dat <- matrix(c(1.1, 2.0,
1.9, 0.8,
2.4, 2.5,
2.0, 2.9,
5.8, 0.6), byrow = TRUE, ncol = 2)
plot(data, asp = 1)
plot(dat, asp = 1)
dist(dat)
# c)
dist(dat, method = "manhatta")
# c)
dist(dat, method = "manhattan")
# c)
dist(dat, method = "canberra")
# c)
dist(dat, method ="euclidean")
dist(dat, method ="maximum")
dist(dat, method ="manhattan")
dist(dat, method ="canberra")
dist(dat, method ="binary")
dist(dat, method ="minkowski")
